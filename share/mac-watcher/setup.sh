#!/bin/bash
#=================================================================
# MONITOR SETUP UTILITY
# 
# A tool to set up and configure mac-watcher with sleepwatcher
# integration and necessary dependencies.
#=================================================================

# Exit on error
set -e

# Color definitions - simplified and consistent palette
ACCENT='\033[0;36m'     # Cyan for headings and highlights
PRIMARY='\033[0;36m'    # Blue for primary elements
SUCCESS='\033[0;32m'    # Green for success/enabled states
WARNING='\033[0;33m'    # Yellow for warnings/optional states
ERROR='\033[0;31m'      # Red for errors/disabled states
NC='\033[0m'            # No Color
BOLD='\033[1m'          # Bold text for emphasis

# Determine the installation directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
MONITOR_SCRIPT="$SCRIPT_DIR/monitor.sh"
CONFIG_FILE="$HOME/.config/monitor.conf"

#=================================================================
# UTILITY FUNCTIONS
#=================================================================

show_header() {
    clear
    echo -e "${ACCENT}${BOLD}╔════════════════════════════════════════════════════╗${NC}"
    echo -e "${ACCENT}${BOLD}║                   MONITOR SETUP                    ║${NC}"
    echo -e "${ACCENT}${BOLD}╚════════════════════════════════════════════════════╝${NC}"
    echo
}

# Function to check dependencies
check_dependencies() {
    echo -e "${ACCENT}◇ CHECKING DEPENDENCIES${NC}"
    
    if ! command -v brew &> /dev/null; then
        echo -e "  Homebrew      : ${ERROR}Not installed${NC}"
        echo -e "  ${WARNING}Please install Homebrew from https://brew.sh/${NC}"
        exit 1
    else
        echo -e "  Homebrew      : ${SUCCESS}Installed${NC}"
    fi
    
    # Check for sleepwatcher
    if ! brew list sleepwatcher &> /dev/null; then
        echo -e "  Sleepwatcher  : ${WARNING}Not installed${NC}"
        echo -e "  ${WARNING}Installing sleepwatcher...${NC}"
        brew install sleepwatcher
        echo -e "  Sleepwatcher  : ${SUCCESS}Installed${NC}"
    else
        echo -e "  Sleepwatcher  : ${SUCCESS}Installed${NC}"
    fi
    
    # Check for CoreLocationCLI if location is enabled
    if grep -q "LOCATION_ENABLED=\"yes\"" "$CONFIG_FILE" 2>/dev/null || [ ! -f "$CONFIG_FILE" ]; then
        if ! command -v CoreLocationCLI &> /dev/null; then
            echo -e "  CoreLocationCLI: ${WARNING}Not installed${NC}"
            echo -e "  ${WARNING}Installing CoreLocationCLI...${NC}"
            brew install --cask corelocationcli
            
            if ! command -v CoreLocationCLI &> /dev/null; then
                echo -e "  CoreLocationCLI: ${ERROR}Installation failed${NC}"
                echo -e "  ${WARNING}⚠️  Please install manually:${NC}"
                echo -e "  ${WARNING}    brew install --cask corelocationcli${NC}"
            else
                echo -e "  CoreLocationCLI: ${SUCCESS}Installed${NC}"
            fi
        else
            echo -e "  CoreLocationCLI: ${SUCCESS}Installed${NC}"
        fi
    else
        echo -e "  CoreLocationCLI: ${WARNING}Not required (Location disabled)${NC}"
    fi
    
    # Check for jq (JSON parser)
    if ! command -v jq &> /dev/null; then
        echo -e "  jq            : ${WARNING}Not installed${NC}"
        echo -e "  ${WARNING}Installing jq...${NC}"
        brew install jq
        echo -e "  jq            : ${SUCCESS}Installed${NC}"
    else
        echo -e "  jq            : ${SUCCESS}Installed${NC}"
    fi
    
    # Check for imagesnap (webcam capture)
    if ! command -v imagesnap &> /dev/null; then
        echo -e "  imagesnap     : ${WARNING}Not installed${NC}"
        echo -e "  ${WARNING}Installing imagesnap...${NC}"
        brew install imagesnap
        echo -e "  imagesnap     : ${SUCCESS}Installed${NC}"
    else
        echo -e "  imagesnap     : ${SUCCESS}Installed${NC}"
    fi
    
    echo -e "  ${SUCCESS}Dependency check completed${NC}"
    echo
}

# Create .wakeup file and default configuration
create_wakeup_file() {
    local wakeup_file="$HOME/.wakeup"
    
    echo -e "${ACCENT}◇ CONFIGURING WAKEUP FILE${NC}"
    echo -e "  Target location: ${PRIMARY}$wakeup_file${NC}"
    
    # Create the file with the appropriate content
    cat > "$wakeup_file" << EOL
#!/bin/bash
# This file is automatically generated by mac-watcher setup
# It will be executed by sleepwatcher when your Mac wakes from sleep

# Run the mac-watcher monitor script
"$MONITOR_SCRIPT" &
EOL
    
    # Make it executable
    chmod 755 "$wakeup_file"
    
    if [ -f "$wakeup_file" ] && [ -x "$wakeup_file" ]; then
        echo -e "  Status         : ${SUCCESS}Created successfully${NC}"
        echo -e "  Permissions    : ${SUCCESS}Executable (755)${NC}"
    else
        echo -e "  Status         : ${ERROR}Error creating file${NC}"
    fi
    echo
    
    # Create default configuration if it doesn't exist
    echo -e "${ACCENT}◇ CREATING DEFAULT CONFIGURATION${NC}"
    echo -e "  Target location: ${PRIMARY}$CONFIG_FILE${NC}"
    
    if [ ! -f "$CONFIG_FILE" ]; then
        # Create the directory if it doesn't exist
        mkdir -p "$(dirname "$CONFIG_FILE")"
        
        # Create the default configuration file
        cat > "$CONFIG_FILE" << EOL
# Monitor Configuration Default
EMAIL_FROM="onboarding@resend.dev"
EMAIL_TO=""
RESEND_API_KEY=""
EMAIL_ENABLED="no"
INITIAL_EMAIL_ENABLED="yes"
FOLLOWUP_EMAIL_ENABLED="yes"
EMAIL_TIME_RESTRICTION_ENABLED="no"
EMAIL_ACTIVE_WINDOWS=""
EMAIL_DAY_RESTRICTION_ENABLED="no"
EMAIL_ACTIVE_DAYS="Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday"
INITIAL_DELAY=2
FOLLOWUP_DELAY=25
BASE_DIR="\$HOME/Pictures/.access"
LOCATION_ENABLED="yes"
LOCATION_METHOD="corelocation_cli"
LOCATION_CONFIGURED="no"
NETWORK_INFO_ENABLED="yes"
WEBCAM_ENABLED="yes"
SCREENSHOT_ENABLED="yes"
FOLLOWUP_SCREENSHOT_ENABLED="yes"
CUSTOM_SCHEDULE_ENABLED="no"
ACTIVE_DAYS="Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday"
SCHEDULE_ACTIVE_WINDOWS=""
AUTO_DELETE_ENABLED="no"
AUTO_DELETE_DAYS=365
HTML_EMAIL_ENABLED="yes"
EOL
        
        if [ -f "$CONFIG_FILE" ]; then
            echo -e "  Status         : ${SUCCESS}Created successfully${NC}"
        else
            echo -e "  Status         : ${ERROR}Error creating configuration file${NC}"
        fi
    else
        echo -e "  Status         : ${WARNING}Configuration already exists${NC}"
        echo -e "  Action         : ${SUCCESS}Preserved existing configuration${NC}"
    fi
    echo
}

check_sleepwatcher_service() {
    echo -e "${ACCENT}◇ SLEEPWATCHER SERVICE${NC}"
    
    if brew services list | grep sleepwatcher | grep started &> /dev/null; then
        echo -e "  Status         : ${SUCCESS}Running${NC}"
    else
        echo -e "  Status         : ${WARNING}Not running${NC}"
        echo -e "  ${WARNING}You need to start the service with:${NC}"
        echo -e "  ${PRIMARY}    brew services start sleepwatcher${NC}"
    fi
    echo
}

# Main setup function
main() {
    show_header
    echo -e "${BOLD}Setting up mac-watcher monitoring system...${NC}"
    echo
    
    # Check and install dependencies
    check_dependencies
    
    # Create .wakeup file
    create_wakeup_file
    
    # Check sleepwatcher service
    check_sleepwatcher_service
    
    # Final instructions
    echo -e "${ACCENT}${BOLD}╔════════════════════════════════════════════════════╗${NC}"
    echo -e "${ACCENT}${BOLD}║                   SETUP COMPLETE                   ║${NC}"
    echo -e "${ACCENT}${BOLD}╚════════════════════════════════════════════════════╝${NC}"
    echo
    echo -e "${PRIMARY}${BOLD}Next steps to complete your setup:${NC}"
    echo
    echo -e "1. ${PRIMARY}Start the sleepwatcher service:${NC}"
    echo -e "   ${SUCCESS}brew services start sleepwatcher${NC}"
    echo
    echo -e "2. ${PRIMARY}Configure mac-watcher settings:${NC}"
    echo -e "   ${SUCCESS}mac-watcher --config${NC}"
    echo
    echo -e "3. ${PRIMARY}Verify your setup:${NC}"
    echo -e "   ${SUCCESS}mac-watcher --diagnostics${NC}"
    echo
}

# Run the main function
main 